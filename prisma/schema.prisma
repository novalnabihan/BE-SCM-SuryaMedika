// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          String    @id @default(uuid())
  fullName    String
  username    String    @unique
  email       String    @unique
  phone       String
  role        Role
  password    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? // soft delete

  invoices    Invoice[]
  transactions Transaction[]
  priceHistories ItemPriceHistory[] @relation("UserPriceChanges")
  passwordResetTokens PasswordResetToken[]

}

model Warehouse {
  id         String    @id @default(uuid())
  name       String
  address    String
  type       WarehouseType
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  itemStocks ItemStock[]
  transactions Transaction[]
  stockFlows StockFlow[]
}

model Item {
  id         String    @id @default(uuid())
  name       String    
  currentPrice Float
  kodeBarang  String   @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  itemStocks ItemStock[]
  priceHistories ItemPriceHistory[]
  transactions Transaction[]
  stockFlows StockFlow[]
}

model ItemStock {
  id          String    @id @default(uuid())
  item        Item      @relation(fields: [itemId], references: [id])
  itemId      String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId String
  stockQty    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([itemId, warehouseId])
}

model ItemPriceHistory {
  id         String    @id @default(uuid())
  item       Item      @relation(fields: [itemId], references: [id])
  itemId     String
  price      Float
  changedAt  DateTime  @default(now())
  changedById  String   
  changedBy  User      @relation("UserPriceChanges", fields: [changedById], references: [id])
}

model Invoice {
  id             String    @id @default(uuid())
  invoiceCode    String    @unique
  transactionDate DateTime
  paymentStatus  Boolean   // true = lunas
  buyer          String?
  paymentMethod  String
  createdBy      User      @relation(fields: [createdById], references: [id])
  createdById    String
  createdAt      DateTime  @default(now())

  transactions   Transaction[]
}

model Transaction {
  id            String    @id @default(uuid())
  invoice       Invoice   @relation(fields: [invoiceId], references: [id])
  invoiceId     String
  item          Item      @relation(fields: [itemId], references: [id])
  itemId        String
  warehouse     Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId   String
  quantity      Int
  unitPrice     Float
  isPurchase    Boolean   // true = pembelian
  subtotal      Float
  createdBy     User      @relation(fields: [createdById], references: [id])
  createdById   String
  createdAt     DateTime  @default(now())

  vendor     Vendor?   @relation(fields: [vendorId], references: [id])
  vendorId   String?

  stockFlows    StockFlow[]
}

model StockFlow {
  id            String    @id @default(uuid())
  item          Item      @relation(fields: [itemId], references: [id])
  itemId        String
  warehouse     Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId   String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
  direction     StockDirection
  qty           Int
  unitCost      Float
  remainingQty  Int
  createdAt     DateTime  @default(now())
}

model Vendor {
  id    String @id @default(uuid())
  name  String

  transactions Transaction[]
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum Role {
  manajer
  karyawan
}

enum WarehouseType {
  gudang
  konsinyasi
}

enum StockDirection {
  in
  out
}